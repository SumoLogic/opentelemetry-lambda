name: Pull Request Build - Java

on:
  pull_request:
    paths:
      - 'java/**'

jobs:
  build-java-artifacts:
    runs-on: ubuntu-20.04
    env:
      BUILD_COMMAND: ./build.sh
      PUBLISH_COMMAND: ./publish.sh
      LANGUAGE: java
      LAYER_ARCHIVE: layer-wrapper/build/distributions/opentelemetry-java-wrapper.zip
    name: Build artifacts
    strategy:
      matrix:
        architecture: [ amd64, arm64 ]
        aws_region: [ eu-central-1 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: '11'
      - name: Cache (Java)
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Cache (Python)
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Build layer - ${{ matrix.architecture }}
        run: GOARCH=${{ matrix.architecture }} ${{ env.BUILD_COMMAND }}
        working-directory: ${{ env.LANGUAGE }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ matrix.aws_region }}
      - name: Install AWS CLI
        uses: chrislennon/action-aws-cli@v1.1
      - name: Create Lambda Layer - ${{ matrix.architecture }}
        run: ${{ env.PUBLISH_COMMAND }} ${{ matrix.architecture }} "" "test-ll-${{ matrix.architecture }}" ${{ env.LAYER_ARCHIVE }} layer-${{ matrix.architecture }}.zip
        working-directory: ${{ env.LANGUAGE }}
      - name: clean s3
        if: always()
        run: |
          aws s3 rb --force s3://test-ll-${{ matrix.architecture }}
